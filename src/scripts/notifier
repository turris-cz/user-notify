#!/bin/sh

base_folder=/tmp/user_notify
date_cmd="/bin/busybox date"
default_lang="en"

if [ "$1" = "-d" ]; then
	base_folder="$2"
	shift 2
fi

mkdir -p "$base_folder"

locker_stamp="$base_folder/.locked"
msmtp_cfg_file="$locker_stamp/msmtp.cfg.$$"
mail_file="$locker_stamp/msg.mail"
mail_file_temp="$locker_stamp/msg.mail.tmp"
mail_stamp="sent_by_email"


turris_email_domain='notify.turris.cz'
mailpass_certapi_hostname='sentinel.turris.cz'
mailpass_file='/etc/sentinel/mailpass'


smtp_enabled=$(uci -q get user_notify.smtp.enable)
mail_to=$(uci -q get user_notify.smtp.to)

# set default value to 0 if not defined as well
turris_smtp=$(uci -q get user_notify.smtp.use_turris_smtp)
if [ "${turris_smtp:=0}" = '1' ]; then
	# force turris e-mail domain
	sender_name=$(uci -q get user_notify.smtp.sender_name | cut -d '@' -f1)
	mail_from="${sender_name:-turris}@${turris_email_domain}"
else
	mail_from=$(uci -q get user_notify.smtp.from)
fi

# Auto-detect from system configuration somehow?
lang=$(uci -q get foris.settings.lang || echo $default_lang)


get_turris_password() {
	[ -f "$mailpass_file" ] || {
		echo "notifier: Error: Mailpass file does not exist" >&2
		return 1
	}

	cat "$mailpass_file"
}


generate_turris_password() {
	sentinel-certgen mailpass \
			--cert-api-hostname "$mailpass_certapi_hostname" \
			--filename "$mailpass_file" > /dev/null || {
		echo "notifier: Warning: Certgen has failed to generate turris password" >&2
		return 1
	}
}


create_msmtp_config() {
	if [ "$turris_smtp" = '1' ]; then
		generate_turris_password || {
			# if it fails and password exists, report warning only
			get_turris_password > /dev/null || exit 3
		}
	fi

	# create configuration file
	{
		echo "account notifier"

		if [ "$turris_smtp" = "1" ]; then
			get_turris_smtp_settings
		else
			get_user_server_settings
		fi

		echo "timeout 5"
		echo "account default: notifier"
	} > "$msmtp_cfg_file"
}


get_turris_smtp_settings() {
	local sn username password
	sn=$(crypto-wrapper serial-number) || exit 3
	username="${sn}@${turris_email_domain}"
	password=$(get_turris_password) || exit 3

	local server="smtp.turris.cz"
	local port="465"

	echo "from $mail_from"
	echo "host $server"
	echo "port $port"
	echo "tls on"
	echo "tls_starttls off"
	echo "tls_certcheck on"
	echo "tls_trust_file /etc/ssl/certs/ca-certificates.crt"
	echo "auth on"
	echo "user $username"
	echo "password $password"
}


get_user_server_settings() {
	local username=`uci -q get user_notify.smtp.username`
	local password=`uci -q get user_notify.smtp.password`
	local server=`uci -q get user_notify.smtp.server`
	local port=`uci -q get user_notify.smtp.port`
	local security=`uci -q get user_notify.smtp.security`

	echo "from $mail_from"
	echo "host $server"
	echo "port $port"

	if [ "$security" = "ssl" ]; then
		echo "tls on"
		echo "tls_starttls off"
		echo "tls_certcheck on"
		echo "tls_trust_file /etc/ssl/certs/ca-certificates.crt"
	elif [ "$security" = "starttls" ]; then
		echo "tls on"
		echo "tls_starttls on"
		echo "tls_certcheck on"
		echo "tls_trust_file /etc/ssl/certs/ca-certificates.crt"
	else
		echo "tls off"
	fi

	if [ -n "$username" -a -n "$password" ]; then
		echo "auth on"
		echo "user $username"
		echo "password $password"
	else
		echo "auth off"
	fi
}


schedule_restart() {
	local max_delay=10
	local delay=$(uci -q get user_notify.reboot.delay)
	local time=$(uci -q get user_notify.reboot.time | tr -d ':')
	local curr_time=$($date_cmd '+%H%M')

	if [ "$delay" -gt "$max_delay" ]; then
		delay=$max_delay
		uci set "user_notify.reboot.delay=$max_delay"
		uci commit
	elif [ "$delay" -le 0 -a "$curr_time" -ge "$time" ]; then
		delay=1
	fi

	local curr_date=$($date_cmd '+%y%m%d')
	local wanted_time=$($date_cmd '+%y%m%d%H%M' -d "$((curr_date + delay))$time")

	echo "reboot" | at -t "$wanted_time" 2> /dev/null
	if [ "$lang" = "cs" ]; then
		echo -e "Zařízení bude automaticky restartováno dne $($date_cmd '+%d. %m. %Y v %H:%M' -d "$wanted_time").\n" >> "$1"
	else
		echo -e "The device will be restarted automatically on $($date_cmd '+%A, %B %e at %I:%M %p' -d "$wanted_time").\n" >> "$1"
	fi
}


format_header() {
    local header="$1"
    local length="${#header}"
    echo "$header"
    printf '%*s\n' "$length" '' | tr ' ' '='
}


compose_message() {
	rm -rf "$mail_file"* > /dev/null 2>&1 || true
	rm -rf "$locker_stamp/stamps"* > /dev/null 2>&1 || true

	local severity=`uci -q get user_notify.notifications.severity`
	local news=`uci -q get user_notify.notifications.news`

	local curr_date=`$date_cmd -R`
	local date_time=`$date_cmd +'%y%m%d.%H%M%S'`
	local rand=`tr -dc A-Za-z0-9 < /dev/urandom 2>/dev/null | head -c8`
	local domain=`uci -q get user_notify.smtp.from | cut -d '@' -f2`
	local msg_id="<$date_time.$rand@$domain>"
	local hostname=`cat /proc/sys/kernel/hostname`
	if [ "$lang" = "cs" ]; then
		local mail_subject="=?utf-8?Q?Upozorn=C4=9Bn=C3=AD?= od =?utf-8?Q?Va=C5=A1eho?= routeru $hostname"
		local heading_restart="Žádosti o restart zařízení"
		local heading_errors="Oznámení o chybách"
		local heading_updates="Oznámení o aktualizacích"
		local heading_news="Oznámení o novinkách"
	else
		local mail_subject="Notification from your router $hostname"
		local heading_restart="Restart is needed"
		local heading_errors="Error notifications"
		local heading_updates="Update notifications"
		local heading_news="News announcements"
	fi

	local msg msg_dir msg_suffix msg_severity msg_file
	for msg_dir in "$base_folder"/*; do
		msg="${msg_dir##*/}"
		# if not a message dir
		[ -d "$msg_dir" ] || continue
		[ -f "$msg_dir/severity" ] || continue
		# if already sent
		[ -f "$msg_dir/$mail_stamp" ] && continue

		echo "Working on message: $msg"
		msg_severity=$(cat "$msg_dir/severity")

		case "$msg_severity" in
			restart|error|update)
				msg_suffix="${msg_severity}s"
				;;
			news)
				msg_suffix="$msg_severity"
				;;
			*)
				echo "Unknown severity: $msg_severity" >&2
				;;
		esac

		if [ -f "$msg_dir/message_$lang" ]; then
			msg_file="$msg_dir/message_$lang"
		elif [ -f "$msg_dir/message_$default_lang" ]; then
			msg_file="$msg_dir/message_$default_lang"
		elif [ -f "$msg_dir/message" ]; then
			msg_file="$msg_dir/message"
		else
			echo "Could not access a message for $msg" >&2
		fi

		[ -n "${msg_file:-}" ] && {
			cat "$msg_file"
			echo
		} >> "$mail_file.$msg_suffix"

		echo "$msg" >> "$locker_stamp/stamps.$msg_suffix"
	done

	if [ -f "$mail_file.restarts" ]; then
		schedule_restart "$mail_file.restarts"
	fi

	if [ -f "$mail_file.restarts" ]; then
		cat "$locker_stamp/stamps.restarts" >> "$locker_stamp/stamps"

		if [ "$severity" -ge 1 ]; then
			format_header "$heading_restart" >> "$mail_file_temp"
			cat "$mail_file.restarts" >> "$mail_file_temp"
		fi
	fi
	if [ -f "$mail_file.errors" ]; then
		cat "$locker_stamp/stamps.errors" >> "$locker_stamp/stamps"

		if [ "$severity" -ge 2 ]; then
			format_header "$heading_errors" >> "$mail_file_temp"
			cat "$mail_file.errors" >> "$mail_file_temp"
		fi
	fi
	if [ -f "$mail_file.news" ]; then
		cat "$locker_stamp/stamps.news" >> "$locker_stamp/stamps"

		if [ "$news" -gt 0 ]; then
			format_header "$heading_news" >> "$mail_file_temp"
			cat "$mail_file.news" >> "$mail_file_temp"
		fi
	fi
	if [ -f "$mail_file.updates" ]; then
		cat "$locker_stamp/stamps.updates" >> "$locker_stamp/stamps"

		if [ "$severity" -ge 3 ]; then
			format_header "$heading_updates" >> "$mail_file_temp"
			cat "$mail_file.updates" >> "$mail_file_temp"
		fi
	fi

	if [ -f "$mail_file_temp" ]; then
		echo "To: $(echo $mail_to | sed 's/ /, /')" > "$mail_file"
		echo "From: $mail_from" >> "$mail_file"
		echo "Content-Type: text/plain; charset=UTF-8" >> "$mail_file"
		echo "Date: $curr_date" >> "$mail_file"
		echo "Message-ID: $msg_id" >> "$mail_file"
		echo -e "Subject: $mail_subject\n" >> "$mail_file"
		cat "$mail_file_temp" >> "$mail_file"
	fi
}


lock() {
	# Try to acquire the lock. But only for a limited amount of time
	# (15 minutes) to prevent too many waiting notifiers to gather in
	# case something bad happens. It is started every 5 minutes anyway.
	for i in $(seq 1 900); do
		if mkdir "$locker_stamp" >/dev/null 2>&1 ; then
			return
		fi
		sleep 1
	done
	echo "Failed to get the lock" >&2
	exit 1
}


unlock() {
	rm -rf "$locker_stamp"
}


mark_msgs() {
	local msg
	while read -r msg; do
		touch "$base_folder/$msg/$mail_stamp"
	done < "$locker_stamp/stamps"
}


send_mail() {
	lock
	trap 'unlock' EXIT ABRT QUIT TERM HUP INT QUIT ILL TRAP BUS FPE SEGV PIPE ALRM

	compose_message

	if [ ! -f "$mail_file" ]; then
		[ -f "$locker_stamp/stamps" ] && mark_msgs
		echo "There is no message to send."
		exit 0
	fi

	if [ "$smtp_enabled" -eq 0 ]; then
		echo "User notifications are not enabled."
	else
		create_msmtp_config
		msmtp -C "$msmtp_cfg_file" -t < "$mail_file" || {
			echo "notifier: msmtp has failed to send e-mail notification" >&2
			exit 2
		}
	fi

	mark_msgs
	unlock
}


send_mail

exec user-notify-cleaner
